@page "/charts"
@using ProdutividadeApp.Models
@using ProdutividadeApp.Pages
@using ProdutividadeApp.Controllers
@using ProdutividadeApp.Services                                
@inject RegistryService RegistryService
@inject MoodService MoodService
@inject NavigationManager Nav
@inject ProductivityService ProductivityService
@inject EmotionService EmotionService

<h3 style="color: white;">📊 Gráficos Semanais</h3>


@if (chartData?.Count > 0)
{
    //Renderiza o componente de gráficos se houver dados
    <MoodProductivityCharts Dados="@chartData" />

    <div style="margin-top: 20px;">
        <button class="btn btn-primary" @onclick="ExportarPdf" disabled="@processando">
            @if (processando)
            {
                <span>Processando...</span>
            }
            else
            {
                <span>📤 Exportar Relatório PDF</span>
            }
        </button>

        @if (!string.IsNullOrEmpty(mensagem))
        {
            <div class="alert @(mensagemTipo == "erro" ? "alert-danger" : "alert-success")"
            style="margin-top: 10px; color: @(mensagemTipo == "erro" ? "darkred" : "darkgreen");">
                @((MarkupString)mensagem)
            </div>
        }
    </div>
}
else
{
    <p style="color: white;">Sem dados para mostrar...</p>
}

@code {
    //Cria uma lista de dados para o gráfico
    private List<DailyChartData> chartData = new();
    private string? mensagem;
    private string mensagemTipo = "sucesso";
    private bool processando = false;

    //Carrega os dados ao iniciar
    protected override async Task OnInitializedAsync()
    {
        chartData = await HistoryController.GetWeeklyChartDataAsync(
            RegistryService, MoodService, ProductivityService, EmotionService);
    }
    //metodo para exportar o PDF
    async Task ExportarPdf()
    {
        try
        {
            processando = true;
            StateHasChanged();

            if (chartData == null || !chartData.Any())
            {
                mensagem = "⚠️ Não há dados disponíveis para exportar";
                mensagemTipo = "erro";
                return;
            }

            // Verificar se há pelo menos um registro com valor
            if (!chartData.Any(d => d.Value > 0))
            {
                mensagem = "⚠️ Não há registros de produtividade para exportar";
                mensagemTipo = "erro";
                return;
            }

            await PdfExporter.GenerateWeeklyReportAsync(chartData);
            mensagem = "✅ PDF criado com sucesso!";
            mensagemTipo = "sucesso";
        }
        catch (Exception ex)
        {
            mensagem = $"❌ Erro ao gerar PDF: <br/><small>{ex.Message}</small>";
            mensagemTipo = "erro";
            Console.WriteLine($"Erro na exportação: {ex}");
        }
        finally
        {
            processando = false;
            StateHasChanged();
        }
    }

    //Verificar login
    protected override void OnInitialized()
    {
        CheckLogin.Verificar(Nav);
    }
    
}